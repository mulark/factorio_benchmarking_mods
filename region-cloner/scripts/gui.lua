local gui = {}

local mod_gui = require("mod-gui")

gui.create_gui = function (player)
    gui.clear_gui(player)
    local mod_button = mod_gui.get_button_flow(player).add{type="sprite-button", name=GUI_PFX .. "main-button", sprite="achievement/lazy-bastard", tooltip="Region Cloner"}
    mod_button.style = mod_gui.button_style
    local frame_flow = mod_gui.get_frame_flow(player)
    local mod_frame = frame_flow.add{type="frame", name=GUI_PFX .. "control-window", caption="", direction="vertical"}

    local title_flow = mod_frame.add{type="flow"}
    local title = title_flow.add{type="label", caption="Region Cloner"}
    title.style.font = "default-large-bold"
    local sub_title = title_flow.add{type="flow"}
    sub_title.style.horizontally_stretchable = true
    sub_title.style.horizontal_align = "right"
    local advanced_view_button = sub_title.add{name=GUI_PFX .. "advanced_view_button", type="button", tooltip="Open advanced settings", caption="Advanced"}

    local advanced_settings_gui = frame_flow.add{name=GUI_PFX .. "advanced_view_pane", type="frame", direction = "vertical"}
    local advanced_title_flow = advanced_settings_gui.add{type="flow"}
    local adv_title = advanced_title_flow.add{type="label", caption="Advanced Settings", tooltip="Break at your own risk."}
    adv_title.style.font = "default-large-bold"
    local sub_adv_title = advanced_title_flow.add{type="flow"}
    sub_adv_title.style.horizontally_stretchable = true
    sub_adv_title.style.horizontal_align = "right"
    sub_adv_title.add{name=GUI_PFX .. "reset_gui_button", type="button", caption="Reset GUI", tooltip="Resets the GUI for your player."}
    advanced_settings_gui.visible = false

    local advanced_tile_paste_lengths_table = advanced_settings_gui.add{type="table", column_count=3, name=GUI_PFX .. "advanced_tile_paste_override_table"}
    advanced_tile_paste_lengths_table.add{type="label"}
    advanced_tile_paste_lengths_table.add{type="label", caption="Tiles to paste X"}
    advanced_tile_paste_lengths_table.add{type="label", caption="Tiles to paste Y"}
    advanced_tile_paste_lengths_table.add{type="checkbox", state=false, name = GUI_PFX .. "advanced_tile_paste_override_checkbox", tooltip="Overrides the tile paste length from being calculated using the bounding box. Useful if you want to partially overlap paste areas. Strongly reccomended to not clear paste area at the same time. Overrides Direction to copy. Allows bad or unusual values so use with care.", caption="Tile paste override"}
    advanced_tile_paste_lengths_table.add{name=GUI_PFX .. "advanced_tile_paste_x", type="textfield", text="0", numeric=true, allow_decimal=true, allow_negative=true}
    advanced_tile_paste_lengths_table.add{name=GUI_PFX .. "advanced_tile_paste_y", type="textfield", text="0", numeric=true, allow_decimal=true, allow_negative=true}

    local clear_paste_area_table = advanced_settings_gui.add{type="table", column_count=3, name=GUI_PFX .. "advanced_clear_paste_area_table"}
    clear_paste_area_table.add{type="label", caption="Clear paste area:", tooltip="Look for entities in the area about to be pasted into and delete them. If you don't clear normal entities it's likely that you'll stack mutiple on one tile, so be careful! Defaults to true."}
    clear_paste_area_table.add{type="checkbox", caption="Normal entities", state=true, name=GUI_PFX .. "clear_normal_entities", tooltip="Clears the paste area of any player owned entities. If you use tile paste overrides with this setting enabled it probably won't work like you want it to!"}
    clear_paste_area_table.add{type="checkbox", caption="Resources", state=true, name=GUI_PFX .. "clear_resource_entities", tooltip="Clears the paste area of ore/resources. May need to pre-generate the map to ensure ore is generated by the time we look for it."}

	--[Adding the "progress bar" checkbox]
	advanced_settings_gui.add{type="checkbox", caption="Print Progress", state=false, name=GUI_PFX .. "progress_bar", tooltip="The progress bar spends an additional 1 tick for each copy, which increases chance of clones breaking."}
	advanced_settings_gui.add{type="checkbox", caption="Print Detailed Progress", state=false, name=GUI_PFX .. "detailed_log", tooltip="The detailed log copies different types of entities in different ticks, which increases the chance of clones breaking."}

    mod_frame.visible = false
    local coord_gui_table = mod_frame.add{type="table", column_count=3, name=GUI_PFX .. "coordinate-table"}
        coord_gui_table.add{type="label", name="left_top_description", caption="Left_top", tooltip="The top left corner coordinate of the region you wish to copy"}
        coord_gui_table.add{type="textfield", name="left_top_x", text="0", numeric=true, allow_negative=true}
        coord_gui_table.add{type="textfield", name="left_top_y", text="0", numeric=true, allow_negative=true}
        coord_gui_table.add{type="label", name="right_bottom_description", caption="Right_bottom", tooltip="The bottom right corner coordinate of the region you wish to copy"}
        coord_gui_table.add{type="textfield", name="right_bottom_x", text="0", numeric=true, allow_negative=true}
        coord_gui_table.add{type="textfield", name="right_bottom_y", text="0", numeric=true, allow_negative=true}

    -- Add selection box rendering controls
    local selection_box_table = mod_frame.add{type="table", column_count=2, name=GUI_PFX .. "selection_box_table"}
        selection_box_table.add{type="checkbox", caption="Show Selection Box", state=true, name=GUI_PFX .. "show_selection_box", tooltip="Displays a visual box around your current selection area"}

    local drop_down_table = mod_frame.add{type="table", column_count=4, name=GUI_PFX .. "drop_down_table"}
        drop_down_table.add{type="label", caption="Direction to copy:", tooltop="The direction pastes will be executed in. Use a custom tile paste override if you need finer control."}
        drop_down_table.add{type="drop-down", items={"North","East","South","West"}, selected_index=1, name = GUI_PFX .. "direction-to-copy"}
        drop_down_table.add{type="label", caption="Number of copies:", tooltip="How many copies of the area above will be made. Note that you will end up with 1 more copy than the number selected here (the original area)"}
        drop_down_table.add{type="textfield", name="number_of_copies", text=1, numeric=true}
        drop_down_table["number_of_copies"].style.left_padding = 8
        drop_down_table["number_of_copies"].style.right_padding = 8
        drop_down_table["number_of_copies"].style.horizontal_align = "right"
        drop_down_table["number_of_copies"].style.maximal_width = 100

    local button_control_table = mod_frame.add{type="table", column_count=3}
        button_control_table.add{type="button", name=GUI_PFX .. "restrict_selection_area_to_entities", caption="Shrink Selection Area", tooltip="Reduces the size of your selection area to include only the entities found in that area"}
        local get_selection_tool_button = button_control_table.add{type="button", name=GUI_PFX .. "get_selection_tool_button", caption="Get Selection Tool"}
        local copy_paste_start_button = button_control_table.add{type="button", name=GUI_PFX .. "issue_copy_pastes_button", caption="Start"}
        copy_paste_start_button.style.horizontal_align="right"
end

gui.clear_gui = function (player)
    local mod_button = mod_gui.get_button_flow(player)
    local mod_frame = mod_gui.get_frame_flow(player)
    if mod_button[GUI_PFX .. "main-button"] then
        mod_button[GUI_PFX .. "main-button"].destroy()
    end
    if mod_frame[GUI_PFX .. "control-window"] then
        mod_frame[GUI_PFX .. "control-window"].destroy()
    end
    if mod_frame[GUI_PFX .. "advanced_view_pane"] then
        mod_frame[GUI_PFX .. "advanced_view_pane"].destroy()
    end
    -- Clear any existing selection box rendering
    gui.clear_selection_box(player)
end

-- Function to render the selection box
gui.render_selection_box = function(player)
    local coord_table = mod_gui.get_frame_flow(player)[GUI_PFX .. "control-window"][GUI_PFX .. "coordinate-table"]
    if not coord_table then return end

    local left_top_x = tonumber(coord_table["left_top_x"].text)
    local left_top_y = tonumber(coord_table["left_top_y"].text)
    local right_bottom_x = tonumber(coord_table["right_bottom_x"].text)
    local right_bottom_y = tonumber(coord_table["right_bottom_y"].text)

    -- Clear existing selection box first
    gui.clear_selection_box(player)

    -- Only render if all coordinates are valid numbers and form a valid rectangle
    if left_top_x and left_top_y and right_bottom_x and right_bottom_y and
       (left_top_x ~= right_bottom_x or left_top_y ~= right_bottom_y) and
       left_top_x < right_bottom_x and left_top_y < right_bottom_y then

        local surface = player.surface

        -- Create rendering objects for the selection box (visual only, no entities)
        local render_objects = {}

        -- Use only the rendering API - no actual entities that could interfere with dragging
        if rendering then
            -- Draw rectangle outline only
            table.insert(render_objects, rendering.draw_rectangle{
                color = {r = 0, g = 1, b = 0, a = 0.8},
                width = 8,
                filled = false,
                left_top = {left_top_x, left_top_y},
                right_bottom = {right_bottom_x, right_bottom_y},
                surface = surface,
                players = {player},
                draw_on_ground = true,
                visible = true
            })
        end

        -- Store render objects for cleanup
        storage.selection_boxes = storage.selection_boxes or {}
        storage.selection_boxes[player.index] = render_objects
    end
end

-- Function to clear the selection box
gui.clear_selection_box = function(player)
    if storage.selection_boxes and storage.selection_boxes[player.index] then
        for _, render_object in pairs(storage.selection_boxes[player.index]) do
            if render_object.valid then
                render_object.destroy()
            end
        end
        storage.selection_boxes[player.index] = nil
    end
end



-- Function to toggle selection box visibility
gui.toggle_selection_box = function(player, show)
    if show then
        gui.render_selection_box(player)
    else
        gui.clear_selection_box(player)
    end
end

return gui